name: Package build

on:
  push:
    tags:
      - 'v0.*'
      - 'dev-build-*'

jobs:
  release:
    runs-on: ubuntu-18.04
    steps:
    - name: Create a Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: DRAKVUF Sandbox ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Store release URL as file
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt
    - name: Upload release URL artifact
      uses: actions/upload-artifact@v1
      with:
        name: release-url
        path: release-url.txt
  build:
    needs: [release]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        container:
          - "debian:buster"
          - "ubuntu:bionic"
          - "ubuntu:focal"
    steps:
    - name: Fetch release URL
      uses: actions/download-artifact@v1
      with:
        name: release-url
    - name: Generate variables
      id: gen_vars
      run: |
        SYSTEM_ID=$(echo ${{ matrix.container }} | cut -f1 '-d:')
        DISTRIBUTION=$(echo ${{ matrix.container }} | cut -f2 '-d:')
        ARTIFACT_PREFIX="${SYSTEM_ID}_${DISTRIBUTION}"
        echo "Artifact prefix: $ARTIFACT_PREFIX"
        RELEASE_URL=$(cat release-url/release-url.txt)
        echo "Release URL: $RELEASE_URL"
        echo "::set-output name=artifact_prefix::${ARTIFACT_PREFIX}"
        echo "::set-output name=release_url::${RELEASE_URL}"
    - name: Checkout DRAKVUF Sandbox
      uses: actions/checkout@v2
      with:
        path: sandbox
        submodules: false
    - name: Get DRAKVUF commit ref
      id: get_drakvuf_ref
      run: |
        DRAKVUF_REF=$(sh -c 'cd sandbox && git ls-tree HEAD drakvuf' | cut -f3 '-d ' | cut -f1 -d$'\t')
        echo "::set-output name=drakvuf_ref::${DRAKVUF_REF}"
    - name: Checkout DRAKVUF
      uses: actions/checkout@v2
      with:
        repository: tklengyel/drakvuf
        path: drakvuf
        ref: ${{ steps.get_drakvuf_ref.outputs.drakvuf_ref }}
        submodules: recursive
    - name: Build DRAKVUF package
      id: build_drakvuf_deb
      run: |
        sh -c 'cd drakvuf && sh package/build.sh ${{ matrix.container }}'
        DRAKVUF_DEB_PATH=$(find drakvuf/package/out/*.deb | head -n1)
        DRAKVUF_DEB_NAME=$(basename "$DRAKVUF_DEB_PATH")
        echo "::set-output name=drakvuf_deb_path::${DRAKVUF_DEB_PATH}"
        echo "::set-output name=drakvuf_deb_name::${{ steps.gen_vars.outputs.artifact_prefix }}_${DRAKVUF_DEB_NAME}"
    - name: Upload DRAKVUF release asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.gen_vars.outputs.release_url }}
        asset_path: ${{ steps.build_drakvuf_deb.outputs.drakvuf_deb_path }}
        asset_name: ${{ steps.build_drakvuf_deb.outputs.drakvuf_deb_name }}
        asset_content_type: application/vnd.debian.binary-package
    - name: Build drakcore package
      id: build_drakcore_deb
      run: |
        sh -c 'cd sandbox && BASEIMAGE=${{ matrix.container }} sh drakcore/package/build.sh'
        DRAKCORE_DEB_PATH=$(find sandbox/out/drakcore*.deb | grep -v dbgsym | head -n1)
        DRAKCORE_DEB_NAME=$(basename "$DRAKCORE_DEB_PATH")
        echo "::set-output name=drakcore_deb_path::${DRAKCORE_DEB_PATH}"
        echo "::set-output name=drakcore_deb_name::${{ steps.gen_vars.outputs.artifact_prefix }}_${DRAKCORE_DEB_NAME}"
    - name: Upload drakcore release asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.gen_vars.outputs.release_url }}
        asset_path: ${{ steps.build_drakcore_deb.outputs.drakcore_deb_path }}
        asset_name: ${{ steps.build_drakcore_deb.outputs.drakcore_deb_name }}
        asset_content_type: application/vnd.debian.binary-package
    - name: Build drakrun package
      id: build_drakrun_deb
      run: |
        sh -c 'cd sandbox && BASEIMAGE=${{ matrix.container }} sh drakrun/package/build.sh'
        DRAKRUN_DEB_PATH=$(find sandbox/out/drakrun*.deb | grep -v dbgsym | head -n1)
        DRAKRUN_DEB_NAME=$(basename "$DRAKRUN_DEB_PATH")
        echo "::set-output name=drakrun_deb_path::${DRAKRUN_DEB_PATH}"
        echo "::set-output name=drakrun_deb_name::${{ steps.gen_vars.outputs.artifact_prefix }}_${DRAKRUN_DEB_NAME}"
    - name: Upload drakrun release asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.gen_vars.outputs.release_url }}
        asset_path: ${{ steps.build_drakrun_deb.outputs.drakrun_deb_path }}
        asset_name: ${{ steps.build_drakrun_deb.outputs.drakrun_deb_name }}
        asset_content_type: application/vnd.debian.binary-package
