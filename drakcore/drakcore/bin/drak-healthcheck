#!/usr/bin/env python
import os
import re
import subprocess
import colorama


def get_service_info(service):
    lines = subprocess.check_output(["systemctl", "show", service]).decode().splitlines()
    return dict(map(lambda l: l.split("=", maxsplit=1), lines))


def service_runnning(info):
    is_loaded = info["LoadState"] == "loaded"
    is_active = info["ActiveState"] == "active"
    is_running = info["SubState"] == "running"
    return all((is_loaded, is_active, is_running))


def get_enabled_drakruns():
    for fn in os.listdir("/etc/systemd/system/default.target.wants"):
        if re.fullmatch(r'drakrun@[0-9]+\.service', fn):
            yield fn


def get_enabled_postprocess_workers():
    for fn in os.listdir("/etc/systemd/system/default.target.wants"):
        if re.fullmatch(r'drak-postprocess@[0-9]+\.service', fn):
            yield fn


def print_status(name, is_ok):
    if is_ok:
        status = colorama.Fore.GREEN + "OK"
    else:
        status = colorama.Fore.RED + "ERROR"

    print(f"{name: <30}{status}")


def main():
    colorama.init(autoreset=True)

    services = [
        "drak-web.service",
        "drak-system.service",
        "drak-minio.service",
    ]

    print("Checking daemon status...")
    for service in services:
        info = get_service_info(service)
        print_status(service, service_runnning(info))

    print("Checking worker status...")
    for service in get_enabled_drakruns():
        info = get_service_info(service)
        print_status(service, service_runnning(info))

    for service in get_enabled_postprocess_workers():
        info = get_service_info(service)
        print_status(service, service_runnning(info))


if __name__ == "__main__":
    main()
