import logging
from pathlib import Path
from typing import List, Optional

from .config import NetworkConfigSection
from .install_info import InstallInfo
from .network_info import NetworkInfo
from .networking import get_network_info_path, start_vm_network, stop_vm_network
from .paths import CONFIGS_DIR
from .storage import get_storage_backend
from .xen import (
    xen_create_vm,
    xen_destroy_vm,
    xen_eject_cd,
    xen_get_domid,
    xen_is_vm_running,
    xen_restore_vm,
    xen_save_vm,
)

log = logging.getLogger(__name__)

FIRST_CDROM_DRIVE = "hdc"
SECOND_CDROM_DRIVE = "hdd"


class VirtualMachine:
    def __init__(
        self,
        vm_id: int,
        install_info: InstallInfo,
        network_conf: NetworkConfigSection,
    ):
        self.vm_id = vm_id
        self.install_info = install_info
        self.network_conf = network_conf
        self.storage = get_storage_backend(install_info)
        self._network_info = None

    @property
    def vm_name(self) -> str:
        return f"vm-{self.vm_id}"

    @property
    def is_running(self) -> bool:
        return xen_is_vm_running(self.vm_name)

    def get_domid(self) -> int:
        return xen_get_domid(self.vm_name)

    def _generate_vm_conf(self, disks: List[str]) -> Path:
        with open(self.install_info.xl_cfg_template, "r") as f:
            template = f.read()

        disks = ", ".join(['"{}"'.format(disk) for disk in disks])

        template = template.replace("{{ VM_NAME }}", str(self.vm_name))
        template = template.replace("{{ VM_ID }}", str(self.vm_id))
        template = template.replace("{{ DISKS }}", disks)
        template = template.replace("{{ VNC_PORT }}", str(6400 + self.vm_id))
        template = template.replace("{{ VCPUS }}", str(self.install_info.vcpus))
        template = template.replace("{{ MEMORY }}", str(self.install_info.memory))
        template = template.replace("{{ VNC_PASS }}", str(self.install_info.vnc_passwd))
        template = template.replace(
            "{{ BRIDGE_NAME }}", str(self._network_info.bridge_name)
        )

        if self.vm_id == 0:
            reboot_action = self.install_info.reboot_vm0_action
        else:
            reboot_action = self.install_info.reboot_vmn_action

        template = template.replace("{{ ON_REBOOT }}", reboot_action)
        target_path = CONFIGS_DIR / f"{self.vm_name}.cfg"
        template = (
            "# Autogenerated, don't edit this file directly!\n"
            + "# Instead please edit /etc/drakrun/cfg.template\n"
            + template
        )
        target_path.write_text(template)
        log.info("Generated VM configuration for %s", self.vm_name)
        return target_path

    def get_network_info(self) -> NetworkInfo:
        if self._network_info is None:
            network_info_path = get_network_info_path(self.vm_id)
            self._network_info = NetworkInfo.load(network_info_path)
        return self._network_info

    def create(self, iso_path: Optional[str] = None) -> None:
        disks = [self.storage.get_vm_disk_path(self.vm_id)]
        if iso_path is not None:
            iso_disk = f"file:{iso_path},{FIRST_CDROM_DRIVE}:cdrom,r"
            disks.append(iso_disk)

        self._network_info = start_vm_network(self.vm_id, self.network_conf)

        vm_conf_path = self._generate_vm_conf(disks)
        xen_create_vm(self.vm_name, vm_conf_path.as_posix())

    def restore(self, snapshot_path: Optional[str] = None) -> None:
        if snapshot_path is None:
            snapshot_path = (
                Path(self.install_info.snapshot_dir) / "snapshot.sav"
            ).as_posix()
        # Ensure VM is destroyed
        self.destroy()
        # No need to rollback vm-0. Since the state of vm-0
        # is correct by definition.
        if self.vm_id != 0:
            self.storage.rollback_vm_storage(self.vm_id)
            disks = [self.storage.get_vm_disk_path(self.vm_id)]
        else:
            self.storage.initialize_vm0_modify_storage()
            disks = [self.storage.get_vm0_modify_disk_path()]

        self._network_info = start_vm_network(self.vm_id, self.network_conf)

        vm_conf_path = self._generate_vm_conf(disks)
        log.info(f"Restoring VM {self.vm_name}")
        xen_restore_vm(self.vm_name, vm_conf_path.as_posix(), snapshot_path)

    def save(self, snapshot_path: Optional[str] = None) -> None:
        if snapshot_path is None:
            snapshot_path = (
                Path(self.install_info.snapshot_dir) / "snapshot.sav"
            ).as_posix()

        log.info(f"Saving VM {self.vm_name}")
        xen_save_vm(self.vm_name, snapshot_path)
        stop_vm_network(self.vm_id)
        self._network_info = None

    def destroy(self) -> None:
        log.info(f"Destroying {self.vm_name}")
        if self.is_running:
            xen_destroy_vm(self.vm_name)
        stop_vm_network(self.vm_id)
        self._network_info = None

    def eject_cd(self):
        xen_eject_cd(self.vm_name, FIRST_CDROM_DRIVE)
